import { Script } from '@script_types/script/script';
import { ScriptConfig } from '../gen/spec_config'; /* File will be automatically generated by compiler! Run "nom run cli install" */
import { specification } from './spec';
import { DataSourcesTypes } from '@script_types/sources/sources_types';

type ProvidedSources = "compute" | "device_lights" | "device_covers";

export let sendToDisplay: FnSendToDisplay | undefined;
export type FnSendToDisplay = <T extends ProvidedSources>(ident: T, data: DataSourcesTypes.MapData<T>) => void;

export interface SocketInfo {
    uid: string;
}

export let verbose = false;


export class MyScript implements Script.Class<ScriptConfig> {

    private running: boolean = false;
    private config: ScriptConfig | undefined;
    private ctx: Script.Context | undefined;


    constructor(){
    }


    start = async (ctx: Script.Context, config: ScriptConfig): Promise<void> => {
        this.ctx = ctx;
        this.config = config;
        this.running = true;

        console.info("Ident:" + specification.id_ident);
        console.info("Config:", this.config);
        console.log("Version: ", specification.version);
    }

    public sendToDisplay = <T extends ProvidedSources>(ident: T, data: DataSourcesTypes.MapData<T>) => {
        this.ctx?.ui.transmitData(ident, data);
    }


    stop = async (_reason: Script.StopReason): Promise<void> => {
        console.info("Stopping all my stuff ...", this.running);
        this.running = false;
    }
}

export const script = new MyScript();